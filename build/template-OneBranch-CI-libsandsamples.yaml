# template-OneBranch-CI-libsandsamples.yaml
# Performs Nuget Restore and Build of LibsAndSamples.sln based on BuildPlatform and BuildConfiguration

parameters:
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'release'
  MsalClientSemVer: '4.60.0-devopsbuild' 
  MsalSourceDir: 'microsoft-authentication-library-for-dotnet\' #Default MSAL Location
  Mode: 'build' # Default to 'build'

steps:

# Unit tests require .NET 3.x
- task: UseDotNet@2
  displayName: 'Use .Net Core SDK 3.x'
  inputs:
    version: 3.x
    
# Use the latest .NET SDK
- task: UseDotNet@2
  displayName: 'Use .Net Core sdk 6.x'
  inputs:
    version: 6.x

# Compute the source directory based on the parameter MsalSourceDir
- task: PowerShell@2
  displayName: 'Compute Source Directory'
  inputs:
    targetType: 'inline'
    script: |
      # Compute base directory
      $MsalBaseDir = "$(Build.SourcesDirectory)/$(MsalSourceDir)"
      
      # Check if both projects exist under MsalSourceDir
      $BrokerExists = Test-Path "$MsalBaseDir/src/client/Microsoft.Identity.Client.Broker"
      $ClientExists = Test-Path "$MsalBaseDir/src/client/Microsoft.Identity.Client"
      
      # Check if both projects exist directly under Build.SourcesDirectory
      $AltBrokerExists = Test-Path "$(Build.SourcesDirectory)/src/client/Microsoft.Identity.Client.Broker"
      $AltClientExists = Test-Path "$(Build.SourcesDirectory)/src/client/Microsoft.Identity.Client"

      if ($BrokerExists -and $ClientExists) {
          Write-Host "##vso[task.setvariable variable=SourceDir]$MsalBaseDir"
      } elseif ($AltBrokerExists -and $AltClientExists) {
          Write-Host "##vso[task.setvariable variable=SourceDir]$(Build.SourcesDirectory)/"
      } else {
          Write-Error "Unable to determine the correct source directory structure."
          exit 1
      }

- task: DotNetCoreCLI@2
  displayName: 'Restore required workloads for projects'
  inputs:
    command: 'custom'
    custom: 'workload'
    arguments: >
      restore $(SourceDir)src/client/Microsoft.Identity.Client/Microsoft.Identity.Client.csproj
      restore $(SourceDir)src/client/Microsoft.Identity.Client.Broker/Microsoft.Identity.Client.Broker.csproj
      --configfile $(SourceDir)NuGet.config

- task: PowerShell@2
  displayName: Install MAUI
  inputs:
    targetType: 'inline'
    script: |
      dotnet workload install maui --source "https://pkgs.dev.azure.com/IdentityDivision/_packaging/IDDP_PublicPackages/nuget/v3/index.json"
      dotnet workload install android --source "https://pkgs.dev.azure.com/IdentityDivision/_packaging/IDDP_PublicPackages/nuget/v3/index.json"

- ${{ if eq(parameters.Mode, 'build') }}:
  - task: UniversalPackages@0
    displayName: 'Download OpenJDK 11 from Azure Artifacts'
    inputs:
      command: 'download'
      downloadDirectory: '$(Build.ArtifactStagingDirectory)\Java'
      feedsToUse: 'internal'
      vstsFeed: 'IDDP_PublicPackages'
      vstsFeedPackage: 'openjdk11'
      vstsPackageVersion: '11.0.2'
      verbosity: 'Information'

- ${{ if eq(parameters.Mode, 'build') }}:
  - task: PowerShell@2
    displayName: 'Extract and Configure OpenJDK 11'
    inputs:
      targetType: 'inline'
      script: |
        # Define paths
        $zipPath = "$(Build.ArtifactStagingDirectory)\Java\openjdk-11.0.2_windows-x64_bin.zip"
        $javaInstallPath = "C:\Program Files\Java\jdk-11.0.2"

        # Extract the ZIP file
        if (!(Test-Path $zipPath)) {
          Write-Error "Java ZIP file not found: $zipPath"
          exit 1
        }
        Expand-Archive -Path $zipPath -DestinationPath "C:\Program Files\Java" -Force
        
        # Set JAVA_HOME and update PATH
        [Environment]::SetEnvironmentVariable("JAVA_HOME", $javaInstallPath, [System.EnvironmentVariableTarget]::Machine)
        $env:JAVA_HOME = $javaInstallPath
        $newPath = "$env:JAVA_HOME\bin;$env:PATH"
        [Environment]::SetEnvironmentVariable("PATH", $newPath, [System.EnvironmentVariableTarget]::Machine)
        $env:PATH = $newPath

        # Log success
        Write-Host "Java installed successfully at $javaInstallPath"
        Write-Host "JAVA_HOME set to $env:JAVA_HOME"

- ${{ if eq(parameters.Mode, 'build') }}:
  - task: PowerShell@2
    displayName: 'Validate Java Installation'
    inputs:
      targetType: 'inline'
      script: |
        # Validate Java version
        try {
          java -version
        } catch {
          Write-Error "Java not found in PATH. Ensure JAVA_HOME and PATH are configured correctly."
          exit 1
        }

        # Confirm JAVA_HOME
        if (-not $env:JAVA_HOME) {
          Write-Error "JAVA_HOME is not set."
          exit 1
        }

        Write-Host "JAVA_HOME is set to $env:JAVA_HOME"
        
- ${{ if eq(parameters.Mode, 'test') }}:
  - task: JavaToolInstaller@0
    displayName: 'Use Java 11 for Test'
    inputs:
      versionSpec: 11
      jdkArchitectureOption: x64
      jdkSourceOption: PreInstalled

- task: CmdLine@2
  displayName: 'Clear local NuGet cache'
  inputs:
    script: 'nuget locals all -clear'

- ${{ if eq(parameters.Mode, 'build') }}:
  - powershell: 'powershell.exe -File "$(MsalSourceDir)build\InstallAndroid.ps1" -ExecutionPolicy Bypass'
    displayName: 'Install Android'

- task: VSBuild@1
  displayName: 'NuGet restore ${{ parameters.Solution }}'
  inputs:
    solution: ${{ parameters.Solution }}
    msbuildArgs: '/t:restore'
    platform: ${{ parameters.BuildPlatform }}
    configuration: ${{ parameters.BuildConfiguration }}

- task: VSBuild@1
  displayName: 'Build solution ${{ parameters.Solution }}'
  inputs:
    solution: ${{ parameters.Solution }}
    msbuildArgs: '/p:RunCodeAnalysis=false /p:MsalClientSemVer=${{ parameters.MsalClientSemVer }} /p:SourceLinkCreate=true /p:ContinousIntegrationBuild=true'
    platform: ${{ parameters.BuildPlatform }}
    configuration: ${{ parameters.BuildConfiguration }}
