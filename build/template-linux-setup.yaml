# template-linux-setup.yaml
# Setup the Linux environment for the build and test tasks

- task: PowerShell@2
  displayName: Upgrade to WSL2 and Install Ubuntu 22.04
  inputs:
    targetType: inline
    script: |
      function DeleteIfExists([string] $filePath)
      {
        if (Test-Path $filePath) {
          Remove-Item $filePath -Recurse -Force
        }
        }
      function DownloadWithRetry([string] $url, [string] $downloadLocation, [int] $retries)
      {
        while($true)
        {
          try
          {
            Invoke-WebRequest $url -OutFile $downloadLocation
            break
          }
          catch
          {
            $exceptionMessage = $_.Exception.Message
            Write-Host "Failed to download '$url': $exceptionMessage"
            DeleteIfExists $downloadLocation
            if ($retries -gt 0) {
              $retries--
              Write-Host "Waiting 10 seconds before retrying. Retries left: $retries"
              Start-Sleep -Seconds 10
            }
            else
            {
              $exception = $_.Exception
              throw $exception
            }
          }
        }
      }
      try {
          DownloadWithRetry -url "https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" -downloadLocation wsl_update_x64.msi -retries 5
          msiexec.exe /i wsl_update_x64.msi /quiet
          wsl --set-default-version 2
          wsl.exe --update
          DownloadWithRetry -url "https://aka.ms/wslubuntu2204" -downloadLocation Ubuntu.zip -retries 5
          DeleteIfExists Ubuntu_2204
          Expand-Archive Ubuntu.zip Ubuntu_2204
          cd Ubuntu_2204
          Rename-Item Ubuntu_2204.1.7.0_x64.appx Ubuntu.zip
          Expand-Archive Ubuntu.zip Ubuntu
          cd Ubuntu
          $output = .\ubuntu.exe install --root
      }
      catch [System.Net.WebException] {
          Write-Host "WebException: $($_.exception)"
          Write-Host "ErrorCode: [$($_.Exception.Response.StatusCode.value__)]"
          throw
      }
      catch [System.IO.FileNotFoundException] {
          Write-Host "A FileNotFoundException occurred: $($_.Exception.Message)"
          Write-Host "Missing file name: $($_.Exception.FileName)"
          throw
      }
      catch [System.InvalidOperationException] {
          Write-Host "InvalidOperationException: $($_.Exception.Message)"
          throw
      }
      catch {
          Write-Output "Unknown Exception caught: [$($_.Exception)]"
          throw
      }
  env:
    ACCEPT_EULA: '1'
  retryCountOnTaskFailure: 5

- task: PowerShell@2
  displayName: Install System dependencies
  inputs:
    targetType: inline
    script: |
      function Run {
          [CmdletBinding()]
          param([ScriptBlock]$cmd)

          Invoke-Command -ScriptBlock $cmd
          if ($LastExitCode -ne 0) {
              throw ("$cmd failed with exit code: " + $lastexitcode)
          }
      }
      $runSetupCommand = "./build/linux-install-deps.sh"
      $DistroName = "ubuntu"
      Run { wsl.exe --distribution $DistroName --user root --exec bash -c "$runSetupCommand" }
  env:
    ACCEPT_EULA: '1'
  retryCountOnTaskFailure: 5

- task: PowerShell@2
  name: SetDbusSession
  displayName: Set DBUS_SESSION_BUS_ADDRESS
  inputs:
    targetType: inline
    script: |
      function Run {
          [CmdletBinding()]
          param([ScriptBlock]$cmd)

          Invoke-Command -ScriptBlock $cmd
          if ($LastExitCode -ne 0) {
              throw ("$cmd failed with exit code: " + $lastexitcode)
          }
      }
      $setDbusAddressCmd = "./build/linux_dbus_session_setup.sh"
      $DistroName = "ubuntu"
      Run { wsl.exe --distribution $DistroName --user root --exec bash -c "$setDbusAddressCmd" }

- task: PowerShell@2
  name: SetTestKeyring
  displayName: Set test key ring
  timeoutInMinutes: 2
  inputs:
    targetType: inline
    script: |
      function Run {
          [CmdletBinding()]
          param([ScriptBlock]$cmd)

          Invoke-Command -ScriptBlock $cmd
          if ($LastExitCode -ne 0) {
              throw ("$cmd failed with exit code: " + $lastexitcode)
          }
      }
      $setTestKeyringCmd = "./build/linux-keyring-setup.sh"
      $DistroName = "ubuntu"
      Run { wsl.exe --distribution $DistroName --user root --exec bash -c "$setTestKeyringCmd" }
  env:
    DBUS_SESSION_BUS_ADDRESS: $(SetDbusSession.dbusSessionAddress)
    WSLENV: DBUS_SESSION_BUS_ADDRESS