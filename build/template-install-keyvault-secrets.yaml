# template-install-keyvault-secrets.yaml
# Install all secrets needed from KeyVault onto the build machine.

steps:
# Task to download Azure Key Vault secrets using the Azure Key Vault task version 2.
- task: AzureKeyVault@2
  displayName: 'Connect to Key Vault'
  inputs:
    azureSubscription: 'AuthSdkResourceManager' # string. Workload identity service connection to use managed identity authentication
    KeyVaultName: 'msidlabs' # string. Required. The name of the Key Vault containing the secrets.
    #setting secrets filter to fetch only MSIDLABCertificate cert from the vault
    SecretsFilter: 'LabAuth' # string. Required. Specifies the secret to download. Use '*' for all secrets.
    #RunAsPreJob: false # boolean. Make secrets available to whole job. Default: false.

- powershell: |
   $kvSecretBytes = [System.Convert]::FromBase64String('$(LabAuth)')
   $certCollection = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
   $certCollection.Import($kvSecretBytes, $null, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable)
   $CertPass = ''
   $protectedCertificateBytes = $certCollection.Export([System.Security.Cryptography.X509Certificates.X509ContentType]::Pkcs12, $CertPass)
   $pfxPath = '$(Build.SourcesDirectory)' + "/TestCert.pfx"
   [System.IO.File]::WriteAllBytes($pfxPath, $protectedCertificateBytes)

   if ([System.Environment]::OSVersion.Platform -eq 'Win32NT') {
      Import-PfxCertificate -FilePath $pfxPath -CertStoreLocation "Cert:\LocalMachine\My"
   } else {
      Write-Output "This script is running on a non-Windows platform. Skipping Import-PfxCertificate."
   }
   Write-Host "Write $((Get-Item -Path $pfxPath).Length) PFX bytes to: $pfxPath"
   Write-Host "##vso[task.setvariable variable=certDir;isOutput=true]$pfxPath"
   Write-Host "##vso[task.setvariable variable=certPass;isSecret=true;isOutput=true]$CertPass"
  name: generateLabCert
  displayName: 'Install Keyvault Secrets'
