parameters:
  DataFileDirectory: 'Release'

jobs: #Build and stage projects

- job: 'PreBuildCheck'
  pool:
      vmImage: 'windows-2022'
      demands:
      - msbuild
      - visualstudio
  variables:
      runCodesignValidationInjection: false
      Codeql.SkipTaskAutoInjection: true

  steps:
  #Pre build analysis
    - template: template-prebuild-code-analysis.yaml

- job: 'BuildAndStageProjects'
  pool:
      vmImage: 'windows-2022'
      demands:
      - msbuild
      - visualstudio
  variables:
      Codeql.SkipTaskAutoInjection: true

  steps:
  # Bootstrap the build
  - template: template-build-and-prep-automation.yaml

# BUILD AND RUN CACHE COMPAT TESTS
- job: 'BuildAndRunCacheCompatTests'
  dependsOn:
    - 'BuildAndStageProjects'
  pool:
      vmImage: 'windows-2022'
      demands:
      - msbuild
      - visualstudio
  variables:
      runCodesignValidationInjection: false
      Codeql.SkipTaskAutoInjection: true

  steps:
  - template: template-cachecompat-automation.yaml
    parameters:
      BuildPlatform: '$(BuildPlatform)'
      BuildConfiguration: '$(BuildConfiguration)'
      BuildSolution: 'LibsAndSamples.sln'

  #Desktop Unit + Integration Tests
- job: 'RunDesktopTests'
  #strategy:
  #  parallel: 5
  dependsOn:
  - 'BuildAndStageProjects'
  pool:
      vmImage: 'windows-2022'
      demands:
      - msbuild
      - visualstudio
  variables:
      runCodesignValidationInjection: false
      Codeql.SkipTaskAutoInjection: true

  steps:
  - template: template-desktop-unit-and-automation.yaml

  - task: BuildQualityChecks@9
    condition: ne(variables['Build.SourceBranch'], 'refs/heads/main') #gate should not run on main branch
    inputs:
      checkCoverage: '$(CodeCoverageGateEnabled)'
      coverageFailOption: 'build'
      coverageType: 'lines'
      allowCoverageVariance: false 
      coverageVariance: 0.01 # Specify by how much the current amount of covered or uncovered code (depending on the parameter *Use Uncovered Elements*) may deviate from the previous value before the policy fails. Please be aware that the code coverage may slowly but steadily decrease from build to build if you allow a code coverage variance. Thus, you should keep this value as low as possible.
      treat0of0as100: true
      coverageUpperThreshold: '90'
      includePartiallySucceeded: false
      fallbackOnPRTargetBranch: false
      baseDefinitionId: '905' #this is the PR build and it is used as a baseline
      baseBranchRef: 'main'

- job: 'BuildandRunIntegrationTestsOnLinux'
  pool:
      vmImage: 'ubuntu-22.04'
      demands:
      - msbuild
  variables:
      runCodesignValidationInjection: false
      Codeql.SkipTaskAutoInjection: true

  steps:
  - template: template-test-on-linux.yaml

- job: 'BuilMacConsoleAppWithBroker'
  pool:
      vmImage: macOS-14

  variables:
      runCodesignValidationInjection: false
      Codeql.SkipTaskAutoInjection: true

  steps:
  - template: template-build-on-mac.yaml

- job: 'RunManagedIdentityE2ETestsOnAzureArc'
  displayName: 'Managed Identity E2E Tests – Azure ARC Agent'
  dependsOn: ['BuildAndStageProjects']
  pool:
    name: 'MSALMSIAZUREARC'
  condition: and(succeeded(), eq(variables['RunManagedIdentityE2EArcTests'], 'true'))

  steps:
  - template: template-run-mi-e2e-azurearc.yaml
    parameters:
      BuildConfiguration: 'Release'
      TargetFramework: 'net8.0'

- job: 'RunManagedIdentityE2ETestsOnImds'
  displayName: 'Managed Identity E2E Tests – VM / IMDS'
  dependsOn: ['BuildAndStageProjects']
  pool:
    name: 'ID4SMSIHostedAgent'
  condition: and(succeeded(), eq(variables['RunManagedIdentityE2EVmTests'], 'true'))

  steps:
  - template: template-run-mi-e2e-imds.yaml
    parameters:
      BuildConfiguration: 'Release'
      TargetFramework:   'net8.0'
