# template-run-unit-tests.yaml
# Run all unit tests across the LibsAndSamples.sln project

parameters:
  BuildConfiguration: 'Release'

steps:

- task: VSTest@2
  displayName: 'Run unit tests (.NET FX)'
  condition: and(succeeded(), eq(variables['PipelineType'], 'legacy'))
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\Microsoft.Identity.Test.Unit\bin\**\net4*\Microsoft.Identity.Test.Unit.dll'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    runInParallel: true
    codeCoverageEnabled: true
    failOnMinTestsNotRun: true
    minimumExpectedTests: '1'
    pathtoCustomTestAdapters: 'C:\temp' # Workaround for test failure, as NUnit Test Adapter that gets detected seems to mess something up

- task: VSTest@2
  displayName: 'Run unit tests (.NET FX) on OneBranch'
  condition: and(succeeded(), eq(variables['PipelineType'], 'OneBranch'))
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\Microsoft.Identity.Test.Unit\bin\**\net4*\Microsoft.Identity.Test.Unit.dll'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    runInParallel: true
    codeCoverageEnabled: true
    failOnMinTestsNotRun: true
    minimumExpectedTests: '1'

- task: VSTest@2
  displayName: 'Run unit tests (.NET 6)'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\Microsoft.Identity.Test.Unit\bin\**\net6.0\Microsoft.Identity.Test.Unit.dll'
    searchFolder: '$(System.DefaultWorkingDirectory)'
    runInParallel: true
    codeCoverageEnabled: true
    failOnMinTestsNotRun: true
    minimumExpectedTests: '1'
