steps:
# Install NuGet
- task: NuGetToolInstaller@0
  displayName: 'Use latest NuGet'
  inputs:
    versionSpec: 6.x

- task: UseDotNet@2
  displayName: 'Use the latest .NET 6'
  inputs:
    version: 6.x

- task: PowerShell@2
  displayName: 'Installing Xamarin iOS/macOS components'
  inputs:
    targetType: 'inline'
    script: |
      Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
      $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
      $componentsToAdd = @(
          "Component.Xamarin"
      )
      [string]$workloadArgs = $componentsToAdd | ForEach-Object {" --add " +  $_}
      $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$workloadArgs, '--quiet', '--norestart', '--nocache')
      $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
      if ($process.ExitCode -eq 0)
      {
          Write-Host "components have been successfully added"
      }
      else
      {
          Write-Host "components were not installed"
          exit 1
      }

# Nuget Restore and Build 
- template: template-restore-build-libsandsamples.yaml
  parameters:
    BuildPlatform: '$(BuildPlatform)'
    BuildConfiguration: '$(BuildConfiguration)'
    MsalClientSemVer: $(MsalClientSemVer)
    Solution: 'LibsAndSamples.sln'
    
- task: DownloadSecureFile@1
  displayName: 'Download Xamarin Ui Test Tools'
  inputs:
    secureFile: 'test-cloud.exe'

- task: CopyFiles@2
  displayName: 'Stage MSAL src'
  inputs:
    SourceFolder: src\client
    Contents: '**\**.cs'
    TargetFolder: '$(build.artifactstagingdirectory)/msalSrc'

- task: CopyFiles@2
  displayName: 'Stage MSAL src bin'
  inputs:
    SourceFolder: src\client
    Contents: '**\bin\**\*'
    TargetFolder: '$(build.artifactstagingdirectory)/msalSrc'

- task: CopyFiles@2
  displayName: 'Stage MSAL tests'
  inputs:
    SourceFolder: tests
    Contents: 'Microsoft.Identity**\bin\**\**'
    TargetFolder: '$(build.artifactstagingdirectory)/msalTests'

- task: CopyFiles@2
  displayName: 'Stage CacheCompat tests'
  inputs:
    SourceFolder: tests\CacheCompat
    Contents: '**\bin\**\**'
    TargetFolder: '$(build.artifactstagingdirectory)/cacheCompatTests'

- task: CopyFiles@2
  displayName: 'Copy WAM DevApp Dlls'
  inputs:
    SourceFolder: tests/devapps/wam
    Contents: '**/bin/**/**'
    TargetFolder: '$(Build.SourcesDirectory)/WAM'

- task: PublishPipelineArtifact@1
  displayName: 'Publish Artifact: drop'
  inputs:
    targetPath: $(Build.artifactstagingdirectory)
    artifactName: drop

- task: PowerShell@2
  displayName: 'Verify Existence of Runtime Dlls'
  inputs:
    targetType: 'inline'
    script: |
        #Search Folder
        $searchInFolder = "\WAM\";
        $searchInFolder = Join-Path $(Build.SourcesDirectory) $searchInFolder 

        Write-Host $searchInFolder 

        #runtime path with file name
        $runtimes = @('runtimes\win-x64\native\msalruntime.dll', 
                      'runtimes\win-x86\native\msalruntime_x86.dll', 
                      'runtimes\win-arm64\native\msalruntime_arm64.dll');

        #dev apps to check
        $AppsToCheck = @('MSIX\WPF\bin\Release\', 
                         'MSIX\WPF.Package\bin\AnyCPU\Release\WPF\', 
                         'NetCoreWinFormsWam\bin\Release\net6.0-windows10.0.17763.0\', 
                         'NetDesktopWpf\bin\Release\', 
                         'NetFrameworkWam\bin\Release\',                        
                         'WAMClassLibrary\bin\Release\',
                         'WAMCallsIntoClassLibrary\bin\Release\');

        #Check if runtime files for each arch exist in the Dev Apps for any CPU 
        $errors = '';

        foreach ($runtime in $runtimes) 
        {
            foreach ($app in $AppsToCheck) 
            {
                $appFullPath = $searchInFolder+$app+$runtime
                
                Write-Host $appFullPath
                
                if (-not(Test-Path -Path $appFullPath -PathType Leaf))
                 {
                      $errors += "Failed to find runtime files in : " + $SearchInFolder + $app + "`n";
                 }
            }
        }

        #Check if runtime files for  exist in the MAUI app for win10-x64 runtime identifier
        $mauiAppRuntimeFilePath = Join-Path $searchInFolder "WAMMauiApp\WAMMauiApp\bin\Release\net6.0-windows10.0.19041.0\win10-x64\msalruntime.dll"

        Write-Host $mauiAppRuntimeFilePath

        if (-not(Test-Path -Path $mauiAppRuntimeFilePath -PathType Leaf))
        {
            $errors += "Failed to find runtime files in MAUI test App ";
        }

        #exit if there are errors
        IF (![string]::IsNullOrWhitespace($errors))
        {
            Write-Host $errors;
            echo "##vso[task.logissue type=error]Verify Existence of Runtime Dlls Task Failed."
            echo "##vso[task.complete result=Failed;]Failed"
        }
        Else
        {
            Write-Host "File check complete. All msalruntime dlls are present."
        }



