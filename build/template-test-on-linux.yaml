# template-test-on-linux.yaml
# Run all unit tests across the LibsAndSamples.sln project on Linux platform

parameters:
  BuildConfiguration: 'Release'

steps:

- task: UseDotNet@2
  displayName: 'Use the latest .NET 8'
  inputs:
    version: 8.x

- task: CmdLine@2
  displayName: 'Clear local NuGet cache'
  inputs:
    script: 'nuget locals all -clear'

#Restore workload with the .NET Core CLI task
- task: DotNetCoreCLI@2
  displayName: 'dotnet workload restore for Desktop project'
  inputs:
    command: 'custom'
    custom: 'workload'
    arguments: 'restore .\src\client\Microsoft.Identity.Client.Desktop\Microsoft.Identity.Client.Desktop.csproj'

- task: DotNetCoreCLI@2
  displayName: 'dotnet workload restore'
  inputs:
    command: 'custom'
    custom: 'workload'
    arguments: 'restore .\src\client\Microsoft.Identity.Client\Microsoft.Identity.Client.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build Unit Test'
  inputs:
    command: 'build'
    projects: './tests/Microsoft.Identity.Test.Unit/Microsoft.Identity.Test.Unit.csproj'

# - task: MSBuild@1
#   displayName: 'NuGet restore Unit Test'
#   inputs:
#     solution: 'tests/Microsoft.Identity.Test.Unit/Microsoft.Identity.Test.Unit.csproj'
#     msbuildArguments: '/t:restore'
#     configuration: ${{ parameters.BuildConfiguration }}'
#     msBuildVersion: '17.0'

# - task: DownloadPipelineArtifact@0
#   displayName: Download Artifacts from Windows Build
#   inputs:
#     artifactName: drop
#     downloadPath: $(System.DefaultWorkingDirectory)/drop

# VSTest@2 is supported only on Windows 
- script: |
    ls '$(System.DefaultWorkingDirectory)'
    ls '$(System.DefaultWorkingDirectory)/drop/'
    dotnet test **/Microsoft.Identity.Test.Unit/bin/**/net8.0/Microsoft.Identity.Test.Unit.dll --configuration Release --collect:"XPlat Code Coverage" --settings build/CodeCoverage.runsettings
  displayName: 'Run unit tests .NET'
